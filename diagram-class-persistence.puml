@startuml
' Estereótipos para entidades persistentes
skinparam class {
  BackgroundColor<<Entity>> LightYellow
  BorderColor<<Entity>> DarkGoldenrod
}

package "Modelo de Persistência" {

  class Usuario <<Entity>> {
    - id: int
    - nickname: String
    - nome: String
    - email: String
    - senha: String
    + createUsuario(email, senha, nome, nickname): Usuario
    + getUsuario(id): Usuario
    + updateUsuario(id, nome, nickname, senha): boolean
    + deleteUsuario(id): boolean
    + login(email, senha): boolean
  }

  class Perfil <<Entity>> {
    - curso: String
    - semestre: int
    - bio: String
    - dataAniversario: Date
    - idade: int
    - foto: Binario
  }

  class Categoria <<Entity>> {
    - id: int
    - nome: String
    + createCategoria(nome): Categoria
    + getCategoria(id): Categoria
    + updateCategoria(id, nome): boolean
    + deleteCategoria(id): boolean
    + listCategorias(): List<Categoria>
  }

  class Material <<Entity>> {
    - id: int
    - titulo: String
    - descricao: String
    - tipoArquivo: String
    - dataUpload: Date
    - arquivo: Binario
    + createMaterial(titulo, descricao, tipoArquivo, arquivo, postagem): Material
    + getMaterial(id): Material
    + updateMaterial(id, titulo, descricao, arquivo): boolean
    + deleteMaterial(id): boolean
  }

  class Postagem <<Entity>> {
    - id: int
    - dataPostagem: Date
    - tipoPostagem: String
    - titulo: String
    - conteudo: String
    + createPostagem(titulo, conteudo, tipoPostagem, categoria): Postagem
    + getPostagem(id): Postagem
    + updatePostagem(id, titulo, conteudo): boolean
    + deletePostagem(id): boolean
    + listMateriaisByPostagem(postagemId): List<Material>
  }

  class Topico <<Entity>> {
    - id: int
    - titulo: String
    - conteudo: String
    - dataCriacao: Date
    + createTopico(titulo, conteudo, categoria): Topico
    + getTopico(id): Topico
    + updateTopico(id, titulo, conteudo): boolean
    + deleteTopico(id): boolean
    + listTopicosByUsuario(usuarioId): List<Topico>
  }

  class Comentario <<Entity>> {
    - id: int
    - conteudo: String
    - dataComentario: Date
    + createComentarioTopico(topicoId, conteudo): Comentario
    + createComentarioPostagem(postagemId, conteudo): Comentario
    + getComentario(id): Comentario
    + updateComentario(id, conteudo): boolean
    + deleteComentario(id): boolean
    + listComentariosByTopico(topicoId): List<Comentario>
    + listComentariosByPostagem(postagemId): List<Comentario>
  }

  class Notificacao <<Entity>> {
    - id: int
    - tipoNotificacao: String
    - conteudo: String
    - status: boolean
    - dataEnvio: Date
    + createNotificacao(tipoNotificacao, conteudo): Notificacao
    + getNotificacao(id): Notificacao
    + updateNotificacaoStatus(id, status): boolean
    + deleteNotificacao(id): boolean
    + listNotificacoesByUsuario(usuarioId): List<Notificacao>
  }

  class ConfiguracaoSistema <<Entity>> {
    - tempoResposta: float
    - usuariosSimultaneos: int
    - cargaServidor: float
    - capacidadeDados: float
    - disponibilidade: float
    - navegadoresSuporte: String
    - dispositivosMoveis: String
    + getConfiguracao(): ConfiguracaoSistema
    + updateConfiguracao(tempoResposta, usuariosSimultaneos, cargaServidor, capacidadeDados, disponibilidade, navegadoresSuporte, dispositivosMoveis): boolean
  }

  ' Relações
  ' Composição: Perfil não existe sem Usuario
  Usuario *-- Perfil
  
  ' Associação simples: Usuario relaciona com Material, Topico, Postagem e Notificacao
  Usuario "1" -- "*" Material
  Usuario "1" -- "*" Topico
  Usuario "1" -- "*" Postagem
  Usuario "1" -- "*" Notificacao

  ' Associação simples: Categoria referenciada por Postagem e Topico
  Categoria "1" -- "*" Postagem
  Categoria "1" -- "*" Topico

  ' Associação: Postagem tem vários Materiais
  Postagem "1" -- "*" Material

  ' Composição: Comentario faz parte de Topico e Postagem
  Topico *-- Comentario
  Postagem *-- Comentario

}
@enduml